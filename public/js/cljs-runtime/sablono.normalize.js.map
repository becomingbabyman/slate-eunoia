{"version":3,"file":"sablono.normalize.js","sources":["sablono/normalize.cljc"],"mappings":"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","names":["sablono.normalize/compact-map","m","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","p__28513","vec__28514","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","_","v","cljs.core/empty?","sablono.normalize/class-name","x","cljs.core/Keyword","cljs.core/name","sablono.normalize/map-lookup?","cljs.core/list?","cljs.core/first","sablono.normalize/class","class","cljs.core/Symbol","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/set?","cljs.core/sequential?","p1__28517#","cljs.core/every?","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","sablono.normalize/attributes","attrs","G__28518","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","sablono.normalize/merge-with-class","seq28519","self__4519__auto__","cljs.core/seq","maps","classes","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","G__28520","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/into","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/vec","sablono.normalize/strip-css","s","clojure.string/replace","sablono.normalize/match-tag","vec__28526","matches","cljs.core/re-seq","tag-name","names","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__28530","fexpr__28529","cljs.core/ffirst","cljs.core/rest","p1__28524#","cljs.core/some","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","p1__28525#","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$1","sablono.normalize/children","cljs.core/List","sablono.util/element?","cljs.core/count","cljs.core/not","G__28531","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","sablono.normalize/attrs?","cljs.core/map?","p__28532","vec__28533","seq__28534","first__28535","cljs.core/next","sablono.normalize/element","tag","content","vec__28536","id","tag-attrs","map-attrs","sablono.normalize.merge_with_class.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns sablono.normalize\n  (:refer-clojure :exclude [class])\n  (:require #?(:clj [om.next.protocols :as p])\n            #?(:clj [om.dom :as dom])\n            [clojure.set :as set]\n            [clojure.string :as str]\n            [sablono.util :as util]))\n\n(defn compact-map\n  \"Removes all map entries where the value of the entry is empty.\"\n  [m]\n  (when m\n    (into {}\n          (remove (fn [[_ v]] (empty? v)))\n          m)))\n\n(defn class-name\n  [x]\n  (cond\n    (string? x) x\n    (keyword? x) (name x)\n    :else x))\n\n(defn map-lookup?\n  \"Returns true if `x` is a map lookup form, otherwise false.\"\n  [x]\n  (and (list? x) (keyword? (first x))))\n\n(defn class\n  \"Normalize `class` into a vector of classes.\"\n  [class]\n  (cond\n    (nil? class)\n    nil\n\n    (map-lookup? class)\n    [class]\n\n    (list? class)\n    (if (symbol? (first class))\n      [class]\n      (map class-name class))\n\n    (symbol? class)\n    [class]\n\n    (string? class)\n    [class]\n\n    (keyword? class)\n    [(class-name class)]\n\n    (and (or (set? class)\n             (sequential? class))\n         (every? #(or (keyword? %)\n                      (string? %))\n                 class))\n    (mapv class-name class)\n\n    (and (or (set? class)\n             (sequential? class)))\n    (mapv class-name class)\n\n    :else class))\n\n(defn attributes\n  \"Normalize the `attrs` of an element.\"\n  [attrs]\n  (cond-> attrs\n    (:class attrs)\n    (update-in [:class] class)))\n\n(defn merge-with-class\n  \"Like clojure.core/merge but concatenate :class entries.\"\n  [& maps]\n  (let [maps (map attributes maps)\n        classes (mapcat :class maps)]\n    (when (seq maps)\n      (cond-> (reduce into {} maps)\n        (not (empty? classes))\n        (assoc :class (vec classes))))))\n\n(defn strip-css\n  \"Strip the # and . characters from the beginning of `s`.\"\n  [s]\n  (when s\n    (str/replace s #\"^[.#]\" \"\")))\n\n(defn match-tag\n  \"Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes.\"\n  [s]\n  (let [matches (re-seq #\"[#.]?[^#.]+\" (name s))\n        [tag-name names]\n        (cond (empty? matches)\n              (throw (ex-info (str \"Can't match CSS tag: \" s) {:tag s}))\n\n              (#{\\# \\.} (ffirst matches)) ;; shorthand for div\n              [\"div\" matches]\n\n              :default\n              [(first matches) (rest matches)])]\n    [tag-name\n     (strip-css (some #(when (= \\# (first %1)) %1)  names))\n     (into []\n           (comp (filter #(= \\. (first %1))) (map strip-css))\n           names)]))\n\n(defn children\n  \"Normalize the children of a HTML element.\"\n  [x]\n  (->> (cond\n         (nil? x)\n         '()\n         (string? x)\n         (list x)\n\n         (util/element? x)\n         (list x)\n         (and (list? x) (symbol? (first x)))\n         (list x)\n\n         (list? x)\n         x\n\n         (and (sequential? x)\n              (= (count x) 1)\n              (sequential? (first x))\n              (not (string? (first x)))\n              (not (util/element? (first x))))\n         (children (first x))\n\n         (sequential? x)\n         x\n\n         :else (list x))\n       (remove nil?)))\n\n(defn- attrs?\n  \"Returns true if `x` are the attributes of an HTML element,\n  otherwise false.\"\n  [x]\n  (and (map? x)\n       ;; Server rendered Om.next components are also maps. They\n       ;; should NOT be treated as HTML element attributes.\n       #?(:clj (and (not (instance? om.dom.Element x))\n                    (not (instance? om.next.protocols.IReactComponent x))\n                    (not (satisfies? p/IReactComponent x))))))\n\n(defn element\n  \"Ensure an element vector is of the form [tag-name attrs content].\"\n  [[tag & content]]\n  (when-not (or (keyword? tag)\n                (symbol? tag)\n                (string? tag))\n    (throw (ex-info (str tag \" is not a valid element name.\") {:tag tag :content content})))\n  (let [[tag id class] (match-tag tag)\n        tag-attrs (compact-map {:id id :class class})\n        map-attrs (first content)]\n    (if (attrs? map-attrs)\n      [tag\n       (merge-with-class tag-attrs map-attrs)\n       (children (next content))]\n      [tag\n       (attributes tag-attrs)\n       (children content)])))\n"]}