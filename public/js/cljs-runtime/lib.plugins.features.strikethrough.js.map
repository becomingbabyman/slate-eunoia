{"version":3,"file":"lib.plugins.features.strikethrough.js","sources":["lib/plugins/features/strikethrough.cljs"],"mappings":";;;;;AAKA,iEAAA,jEAAMA,0IAA6BC;AAAnC,AACE,iEAAA,1DAACC,6CAAKD,iBAAe,iCAAA,hCAAG,AAACE,gBAAMF;;AAEjC,+CAAA,/CAAMG,sGAAWC,OAAOC,MAAMC;AAA9B,AACE,oBAAIA;AACF,IAAMC,OAAK,AAACC,gBAAMC;IACZC,aAAW,AAACX,+DAA4BQ;AAD9C,AAEE,OAAaH,kBAAOM,WAAW,qBAAA,mFAAA,xGAACC;;AAClC,yBAAA,lBAAaP;;;AAEjB,iDAAA,jDAAMQ,0GAAaC;AAAnB,AACE,GAAM,6CAAA,7CAACC,6DAAkBC;AAAzB,AACE,iEAAA,1DAACC,gEACiBC,iBACAC;;AAHpB;;;AAKF,AAAA;;;mDAAA,2DAAAC,9GAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,+EAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,iFAAA,jFAAMD,4FAEFE;AAFJ,AAAA,kDAAA,2DAII,qBAAA,y/BAAA,2CAAA,zjCAACZ,wGACC,8CAAA,2CAAA,0DAAA,KAAA,0DAAA,aAAA,/NAACa,8RAGYrB,sDACb,8CAAA,2CAAA,0DAAA,IAAA,0DAAA,UAAA,3NAACqB,0RAGYrB,sDACb,kCAAA,2CAAA,oDAAA,YAAA,7IAACsB,4MAEYtB,iKACAS;;;AAhBnB,AAAA,iFAAA,jFAAMS;AAAN,AAkBG,sFAAA,/EAACK;;;AAlBJ,AAAA,2EAAA,3EAAML;;AAAN","names":["lib.plugins.features.strikethrough/strip-auto-replace-triggers","matched-text","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","lib.plugins.features.strikethrough/transform","change","event","matches","text","cljs.core/first","matches/before","clean-text","cljs.core/clj->js","lib.plugins.features.strikethrough/render-mark","props","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","props/mark.type","reagent.core.create_element.cljs$core$IFn$_invoke$arity$3","props/attributes","props/children","var_args","G__27003","lib.plugins.features.strikethrough/strikethrough","js/Error","options","lib.plugins.helpers.auto-replace/auto-replace","lib.plugins.helpers.hotkey/hotkey","lib.plugins.features.strikethrough.strikethrough.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns lib.plugins.features.strikethrough\n  (:require [reagent.core :as r]\n            [lib.plugins.helpers.auto-replace :refer [auto-replace]]\n            [lib.plugins.helpers.hotkey :refer [hotkey]]))\n\n(defn strip-auto-replace-triggers [matched-text]\n  (subs matched-text 2 (- (count matched-text) 1)))\n\n(defn transform [change event matches]\n  (if matches\n    (let [text (first matches.before)\n          clean-text (strip-auto-replace-triggers text)]\n      (.insertText change clean-text (clj->js [\"strikethrough\"])))\n    (.toggleMark change \"strikethrough\")))\n\n(defn render-mark [props]\n  (when (= \"strikethrough\" props.mark.type)\n    (r/create-element \"del\"\n                      props.attributes\n                      props.children)))\n\n(defn strikethrough\n  \"Adds strikethrough support to editor\"\n  ([options]\n   {:plugins\n    (clj->js\n     [(auto-replace\n       {:trigger #\"\\~\"\n        :before #\"(\\~\\~.+\\~)\"\n        :transform transform})\n      (auto-replace\n       {:trigger \"-\"\n        :before #\"(--.+-)\"\n        :transform transform})\n      (hotkey\n       {:key \"cmd+opt+s\"\n        :transform transform})\n      {:renderMark render-mark}])})\n  ([]\n   (strikethrough {})))\n"]}