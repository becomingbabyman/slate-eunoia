{
"version":3,
"file":"module$node_modules$lodash$_overRest.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,qCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CACtH,IAAIC,MAAQJ,OAAA,CAAQ,mCAAR,CAAZ,CAGIK,UAAYC,IAAAC,IAgChBN,OAAAC,QAAA,CArBAM,QAAiB,CAACC,IAAD,CAAOC,KAAP,CAAcC,SAAd,CAAyB,CACxCD,KAAA,CAAQL,SAAA,CAAoBO,IAAAA,EAAV,GAAAF,KAAA,CAAuBD,IAAAI,OAAvB,CAAqC,CAArC,CAA0CH,KAApD,CAA2D,CAA3D,CACR,OAAO,SAAQ,EAAG,CAMhB,IANgB,IACZI,KAAOC,SADK,CAEZC,MAAS,EAFG,CAGZH,OAASR,SAAA,CAAUS,IAAAD,OAAV,CAAwBH,KAAxB,CAA+B,CAA/B,CAHG,CAIZO,MAAQC,KAAA,CAAML,MAAN,CAEZ,CAAO,EAAEG,KAAT,CAAiBH,MAAjB,CAAA,CACEI,KAAA,CAAMD,KAAN,CAAA,CAAeF,IAAA,CAAKJ,KAAL,CAAaM,KAAb,CAEjBA,MAAA,CAAS,EAET,KADIG,MACJ,CADgBD,KAAA,CAAMR,KAAN,CAAc,CAAd,CAChB,CAAO,EAAEM,KAAT,CAAiBN,KAAjB,CAAA,CACES,MAAA,CAAUH,KAAV,CAAA;AAAmBF,IAAA,CAAKE,KAAL,CAErBG,OAAA,CAAUT,KAAV,CAAA,CAAmBC,SAAA,CAAUM,KAAV,CACnB,OAAOb,MAAA,CAAMK,IAAN,CAAY,IAAZ,CAAkBU,MAAlB,CAfS,CAFsB,CAf4E;",
"sources":["node_modules/lodash/_overRest.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_overRest\"] = function(global,process,require,module,exports,shadow$shims) {\nvar apply = require('./_apply');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","apply","nativeMax","Math","max","overRest","func","start","transform","undefined","length","args","arguments","index","array","Array","otherArgs"]
}
