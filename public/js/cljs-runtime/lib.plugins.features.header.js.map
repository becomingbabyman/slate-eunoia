{"version":3,"file":"lib.plugins.features.header.js","sources":["lib/plugins/features/header.cljs"],"mappings":";;;;;;AAMA,AAAA,wCAAA,gDAAAA,xFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oEAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,sEAAA,tEAAMD,iFACFE,OAAOC;AADX,AAAA;AAGG,IAAMC,OAAK,CAAA,qDAAcD;AAAzB,AACE,OAAYD,iBACA,AAACG,qBAAQ,oFAAA,2CAAA,qDAAA,oBAAA,2CAAA,jPAAI,AAACC,6CAAEF,KAAKG,oPAEHH;;;AAPnC,AAAA,sEAAA,tEAAMJ,iFAQFE,OAAOM,MAAMC,QAAQC;AARzB,AAAA;AAUG,IAAMC,SAAO,AAACC,gBAAMC;IACdV,IAAE,AAACW,gBAAMH;AADf,AAEE,OAACI,oEAAUb,OAAOC;;;AAZvB,AAAA,sEAAA,tEAAMH,iFAaFG;AAbJ,AAAA;AAeG,kBAAKD;AAAL,AACE,OAACa,oEAAUb,OAAOC;;;;AAhBvB,AAAA,gEAAA,hEAAMH;;AAAN,AAkBA,0CAAA,1CAAMgB,4FAAaC;AAAnB,AACE,IAAMC,SAAO,WAAKC;AAAL,AACE,OAACC,8CAAMD,YACA,AAACE,mDAAQC,kBACTC;;AAHtB,AAIE,IAAAC,WAAMC;AAAN,AAAA,QAAAD;KAAA;AACY,OAACN,OAAOQ;;;KADpB;AAEY,OAACR,OAAOS;;;KAFpB;AAGY,OAACT,OAAOU;;;;AAHpB;;;;AAMJ,AAAA;;;qCAAA,6CAAA9B,lFAAMgC;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA;;;;AAAA,MAAA,KAAA7B,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,mEAAA,nEAAM6B,8EAEFC;AAFJ,AAAA,kDAAA,2DAII,qBAAA,8vCAAA,2CAAA,9zCAAC1B,wGACC,8CAAA,2CAAA,0DAAA,QAAA,0DAAA,cAAA,nOAAC2B,kSAGYhC,+CACb,kCAAA,2CAAA,oDAAA,YAAA,7IAACiC,4MAEY,oEAAA,pEAACC,kFACd,kCAAA,2CAAA,oDAAA,YAAA,7IAACD,4MAEY,oEAAA,pEAACC,kFACd,kCAAA,2CAAA,oDAAA,YAAA,7IAACD,4MAEY,oEAAA,pEAACC,6LACDlB;;;AAlBnB,AAAA,mEAAA,nEAAMc;AAAN,AAoBG,wEAAA,jEAACK;;;AApBJ,AAAA,6DAAA,7DAAML;;AAAN","names":["var_args","G__36716","lib.plugins.features.header/transform","js/Error","change","n","type","cljs.core/clj->js","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","change/value.anchorBlock.type","event","matches","editor","hashes","cljs.core/first","matches/before","cljs.core/count","lib.plugins.features.header.transform.cljs$core$IFn$_invoke$arity$2","lib.plugins.features.header/render-node","props","render","h-component","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","props/attributes","props/children","G__36745","props/node.type","lib.components.core/h1","lib.components.core/h2","lib.components.core/h3","G__36749","lib.plugins.features.header/header","options","lib.plugins.helpers.auto-replace/auto-replace","lib.plugins.helpers.hotkey/hotkey","lib.plugins.features.header.transform.cljs$core$IFn$_invoke$arity$1","lib.plugins.features.header.header.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns lib.plugins.features.header\n  (:require [reagent.core :as r]\n            [lib.components.core :as c]\n            [lib.plugins.helpers.auto-replace :refer [auto-replace]]\n            [lib.plugins.helpers.hotkey :refer [hotkey]]))\n\n(defn transform\n  ([change n]\n   \"Contextually Transfrom between header(1-3) and paragraph\"\n   (let [type (str \"header\" n)]\n     (.setBlocks change\n                 (clj->js (if (= type change.value.anchorBlock.type)\n                            {:type \"paragraph\"}\n                            {:type type})))))\n  ([change event matches editor]\n   \"Handle auto-replace events\"\n   (let [hashes (first matches.before)\n         n (count hashes)]\n     (transform change n)))\n  ([n]\n   \"Functor for generating a change handler with a predefined n level\"\n   (fn [change]\n     (transform change n))))\n\n(defn render-node [props]\n  (let [render (fn [h-component]\n                 (apply h-component\n                        (js->clj props.attributes)\n                        props.children))]\n    (case props.node.type\n      \"header1\" (render c/h1)\n      \"header2\" (render c/h2)\n      \"header3\" (render c/h3)\n      nil)))\n\n(defn header\n  \"Adds header support to editor\"\n  ([options]\n   {:plugins\n    (clj->js\n     [(auto-replace\n       {:trigger \"space\"\n        :before #\"^(\\#{1,3})$\"\n        :transform transform})\n      (hotkey\n       {:key \"cmd+opt+1\"\n        :transform (transform 1)})\n      (hotkey\n       {:key \"cmd+opt+2\"\n        :transform (transform 2)})\n      (hotkey\n       {:key \"cmd+opt+3\"\n        :transform (transform 3)})\n      {:renderNode render-node}])})\n  ([]\n   (header {})))\n"]}