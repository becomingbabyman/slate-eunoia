{
"version":3,
"file":"module$node_modules$lodash$_equalArrays.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IACrHC,SAAWJ,OAAA,CAAQ,sCAAR,CAD0G,CAErHK,UAAYL,OAAA,CAAQ,uCAAR,CAFyG,CAGrHM,SAAWN,OAAA,CAAQ,sCAAR,CAgFfC,OAAAC,QAAA,CA7DAK,QAAoB,CAACC,KAAD,CAAQC,KAAR,CAAeC,OAAf,CAAwBC,UAAxB,CAAoCC,SAApC,CAA+CC,KAA/C,CAAsD,CAAA,IACpEC,UAAYJ,OAAZI,CAjBqBC,CAgB+C,CAEpEC,UAAYR,KAAAS,OAFwD,CAGpEC,UAAYT,KAAAQ,OAEhB,IAAID,SAAJ,EAAiBE,SAAjB,EAA8B,EAAEJ,SAAF,EAAeI,SAAf,CAA2BF,SAA3B,CAA9B,CACE,MAAO,CAAA,CAIT;IADIG,SACJ,CADcN,KAAAO,IAAA,CAAUZ,KAAV,CACd,GAAeK,KAAAO,IAAA,CAAUX,KAAV,CAAf,CACE,MAAOU,UAAP,EAAkBV,KAEhBY,UAAAA,CAAS,EAb2D,KAcpEC,OAAS,CAAA,CAd2D,CAepEC,KAAQb,OAAD,CA9BgBc,CA8BhB,CAAqC,IAAIpB,QAAzC,CAAoDqB,IAAAA,EAE/DZ,MAAAa,IAAA,CAAUlB,KAAV,CAAiBC,KAAjB,CAIA,KAHAI,KAAAa,IAAA,CAAUjB,KAAV,CAAiBD,KAAjB,CAGA,CAAO,EAAEa,SAAT,CAAiBL,SAAjB,CAAA,CAA4B,CAAA,IACtBW,SAAWnB,KAAA,CAAMa,SAAN,CADW,CAEtBO,SAAWnB,KAAA,CAAMY,SAAN,CAEf,IAAIV,UAAJ,CACE,IAAIkB,SAAWf,SAAA,CACXH,UAAA,CAAWiB,QAAX,CAAqBD,QAArB,CAA+BN,SAA/B,CAAsCZ,KAAtC,CAA6CD,KAA7C,CAAoDK,KAApD,CADW,CAEXF,UAAA,CAAWgB,QAAX,CAAqBC,QAArB,CAA+BP,SAA/B,CAAsCb,KAAtC,CAA6CC,KAA7C,CAAoDI,KAApD,CAEN,IAAiBY,IAAAA,EAAjB,GAAII,QAAJ,CAA4B,CAC1B,GAAIA,QAAJ,CACE,QAEFP,OAAA,CAAS,CAAA,CACT,MAL0B,CAQ5B,GAAIC,IAAJ,CACE,IAAI,CAAClB,SAAA,CAAUI,KAAV;AAAiB,QAAQ,CAACmB,QAAD,CAAWE,QAAX,CAAqB,CAC7C,GAAI,CAACxB,QAAA,CAASiB,IAAT,CAAeO,QAAf,CAAL,GACKH,QADL,GACkBC,QADlB,EAC8BhB,SAAA,CAAUe,QAAV,CAAoBC,QAApB,CAA8BlB,OAA9B,CAAuCC,UAAvC,CAAmDE,KAAnD,CAD9B,EAEE,MAAOU,KAAAQ,KAAA,CAAUD,QAAV,CAHoC,CAA9C,CAAL,CAKQ,CACNR,MAAA,CAAS,CAAA,CACT,MAFM,CALR,CADF,IAUO,IACDK,QADC,GACYC,QADZ,EAEC,CAAAhB,SAAA,CAAUe,QAAV,CAAoBC,QAApB,CAA8BlB,OAA9B,CAAuCC,UAAvC,CAAmDE,KAAnD,CAFD,CAGA,CACLS,MAAA,CAAS,CAAA,CACT,MAFK,CA9BmB,CAmC5BT,KAAA,CAAM,QAAN,CAAA,CAAgBL,KAAhB,CACAK,MAAA,CAAM,QAAN,CAAA,CAAgBJ,KAAhB,CACA,OAAOa,OA1DiE,CAtB+C;",
"sources":["node_modules/lodash/_equalArrays.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_equalArrays\"] = function(global,process,require,module,exports,shadow$shims) {\nvar SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","SetCache","arraySome","cacheHas","equalArrays","array","other","bitmask","customizer","equalFunc","stack","isPartial","COMPARE_PARTIAL_FLAG","arrLength","length","othLength","stacked","get","index","result","seen","COMPARE_UNORDERED_FLAG","undefined","set","arrValue","othValue","compared","othIndex","push"]
}
