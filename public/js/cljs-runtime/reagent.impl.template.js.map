{"version":3,"file":"reagent.impl.template.js","sources":["reagent/impl/template.cljs"],"mappings":"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","names":["reagent.impl.template/re-tag","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","reagent.impl.template/NativeWrapper","reagent.impl.template/->NativeWrapper","reagent.impl.template/named?","x","cljs.core/Keyword","cljs.core/Symbol","reagent.impl.template/hiccup-tag?","reagent.impl.template/valid-tag?","cljs.core/ifn?","reagent.impl.template/prop-name-cache","reagent.impl.template/cache-get","o","k","reagent.impl.template/cached-prop-name","temp__5459__auto__","k'","cljs.core/name","reagent.impl.util/dash-to-camel","reagent.impl.template/js-val?","goog/typeOf","reagent.impl.template/kv-conv","v","G__34965","reagent.impl.template/convert-prop-value","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/custom-prop-name-cache","reagent.impl.template/cached-custom-prop-name","reagent.impl.template/custom-kv-conv","G__34969","reagent.impl.template/convert-custom-prop-value","reagent.impl.template/oset","G__34985","reagent.impl.template/oget","reagent.impl.template/set-id-class","props","id-class","id","class","G__34986","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","old-class","p__34987","map__34988","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/stringify-class","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","c","clojure.string.join.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/convert-props","js/reagent","js/reagent.impl","js/reagent.impl.template","js/reagent.impl.template.find-dom-node","reagent.impl.template/find-dom-node","reagent.impl.template/these-inputs-have-selection-api","reagent.impl.template/has-selection-api?","input-type","cljs.core/contains?","p__35019","map__35024","reagent.impl.template/input-node-set-value","node","rendered-value","dom-value","component","on-write","js/document","cljs.core/fn?","node-value","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","reagent.impl.batching/do-after-render","reagent.impl.template/input-component-set-value","existing-offset-from-end","cljs.core/count","new-cursor-offset","this","reagent.impl.template/input-handle-change","on-change","e","reagent.impl.template/input-render-setup","jsprops","and__3938__auto__","js/Error","value","G__35035","p1__35033#","reagent.impl.template/input-unmount","reagent.impl.template/input-component?","G__35036","reagent.impl.template/reagent-input-class","reagent.impl.template/input-spec","argv","comp","first-child","reagent.impl.component/*current-component*","reagent.impl.template/make-element","reagent.impl.template/reagent-input","reagent.impl.component/create-class","reagent.impl.template/parse-tag","hiccup-tag","vec__35041","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","tag","cljs.core/re-matches","cljs.core/next","clojure.string/replace","reagent.impl.component/comp-name","reagent.impl.template/try-get-key","e35055","reagent.impl.template/get-key","reagent.impl.template/key-from-vec","cljs.core/meta","reagent.impl.template/reag-element","reagent.impl.component/as-class","temp__5461__auto__","key","js/module$node_modules$react$index.createElement","reagent.impl.template/fragment-element","hasprops","js/module$node_modules$react$index.Fragment","reagent.impl.template/adapt-react-class","G__35092","reagent.impl.template/tag-name-cache","reagent.impl.template/cached-parse","s","reagent.impl.template/native-element","parsed","first","G__35101","cljs.core/with-meta","reagent.impl.template/as-element","p","reagent.impl.template/str-coll","coll","clojure.walk/prewalk","n","reagent.impl.util/fun-name","G__35103","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","reagent.impl.template/hiccup-err","seq35105","G__35106","cljs.core/first","self__4518__auto__","msg","cljs.core/str","reagent.impl.template/vec-to-elem","reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic","cljs.core/keyword-identical?","pos","G__35120","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/vector?","cljs.core/seq?","reagent.impl.template/expand-seq-check","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/as-element","reagent.impl.template/expand-seq","a","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","n__4408__auto__","i","reagent.impl.template/expand-seq-dev","val","vec__35170","ctx","res","derefed","reagent.ratom/check-derefs","reagent/debug.has-console","reagent/debug.tracking","reagent/debug.track-console","js/console","G__35173","G__35174","G__35175","G__35176"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [reagent.impl.util :as util :refer [is-client]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]))\n\n(declare as-element)\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [])\n\n\n;;; Common utilities\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (aget o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (aset (cached-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (aset custom-prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (aset (cached-custom-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn oset [o k v]\n  (doto (if (nil? o) #js{} o)\n    (aset k v)))\n\n(defn oget [o k]\n  (if (nil? o) nil (aget o k)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id ($ id-class :id)\n        class ($ id-class :class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      (assoc :class (let [old-class (:class props)]\n                      (if (nil? old-class) class (str class \" \" (if (named? old-class)\n                                                                  (name old-class)\n                                                                  old-class))))))))\n\n(defn stringify-class [{:keys [class] :as props}]\n  (if (coll? class)\n    (->> class\n         (keep (fn [c]\n                 (if c\n                   (if (named? c)\n                     (name c)\n                     c))))\n         (string/join \" \")\n         (assoc props :class))\n    props))\n\n(defn convert-props [props id-class]\n  (let [props (-> props\n                  stringify-class\n                  (set-id-class id-class))]\n    (if ($ id-class :custom)\n      (convert-custom-prop-value props)\n      (convert-prop-value props))))\n\n;;; Specialization for input components\n\n;; This gets set from reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value component {:keys [on-write]}]\n  (if-not (and (identical? node ($ js/document :activeElement))\n            (has-selection-api? ($ node :type))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      ($! component :cljsDOMValue rendered-value)\n      ($! node :value rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n\n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value ($ node :value)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         ($ node :selectionStart))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          ($! component :cljsDOMValue rendered-value)\n          ($! node :value rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          ($! node :selectionStart new-cursor-offset)\n          ($! node :selectionEnd new-cursor-offset))))))\n\n(defn input-component-set-value [this]\n  (when ($ this :cljsInputLive)\n    ($! this :cljsInputDirty false)\n    (let [rendered-value ($ this :cljsRenderedValue)\n          dom-value ($ this :cljsDOMValue)\n          ;; Default to the root node within this component\n          node (find-dom-node this)]\n      (when (not= rendered-value dom-value)\n        (input-node-set-value node rendered-value dom-value this {})))))\n\n(defn input-handle-change [this on-change e]\n  ($! this :cljsDOMValue (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not ($ this :cljsInputDirty)\n    ($! this :cljsInputDirty true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  [this jsprops]\n  ;; Don't rely on React for updating \"controlled inputs\", since it\n  ;; doesn't play well with async rendering (misses keystrokes).\n  (when (and (some? jsprops)\n             (.hasOwnProperty jsprops \"onChange\")\n             (.hasOwnProperty jsprops \"value\"))\n    (assert find-dom-node\n            \"reagent.dom needs to be loaded for controlled input to work\")\n    (let [v ($ jsprops :value)\n          value (if (nil? v) \"\" v)\n          on-change ($ jsprops :onChange)]\n      (when-not ($ this :cljsInputLive)\n        ;; set initial value\n        ($! this :cljsInputLive true)\n        ($! this :cljsDOMValue value))\n      ($! this :cljsRenderedValue value)\n      (js-delete jsprops \"value\")\n      (doto jsprops\n        ($! :defaultValue value)\n        ($! :onChange #(input-handle-change this on-change %))))))\n\n(defn input-unmount [this]\n  ($! this :cljsInputLive nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv comp jsprops first-child)))})\n\n(defn reagent-input\n  []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id class] (->> hiccup-tag name (re-matches re-tag) next)\n        class (when-not (nil? class)\n                (string/replace class #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\"\n                     (comp/comp-name)))\n    #js {:name tag\n         :id id\n         :class class\n         ;; Custom element names must contain hyphen\n         ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n         :custom (not= -1 (.indexOf tag \"-\"))}))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js{:argv v}]\n    (when-some [key (key-from-vec v)]\n      ($! jsprops :key key))\n    (react/createElement c jsprops)))\n\n(defn fragment-element [argv]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (convert-prop-value (if hasprops props))\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (key-from-vec argv)]\n      (oset jsprops \"key\" key))\n    (make-element argv react/Fragment jsprops first-child)))\n\n(defn adapt-react-class\n  [c]\n  (doto (->NativeWrapper)\n    ($! :name c)\n    ($! :id nil)\n    ($! :class nil)))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (aset tag-name-cache x (parse-tag x))))\n\n(defn native-element [parsed argv first]\n  (let [comp ($ parsed :name)]\n    (let [props (nth argv first nil)\n          hasprops (or (nil? props) (map? props))\n          jsprops (convert-props (if hasprops props) parsed)\n          first-child (+ first (if hasprops 1 0))]\n      (if (input-component? comp)\n        (-> [(reagent-input) argv comp jsprops first-child]\n            (with-meta (meta argv))\n            as-element)\n        (let [key (-> (meta argv) get-key)\n              p (if (nil? key)\n                  jsprops\n                  (oset jsprops \"key\" key))]\n          (make-element argv comp p first-child))))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n \"\" x (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (keyword-identical? :<> tag)\n      (fragment-element v)\n\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          ;; TODO: Doesn't this match :>foo or any keyword starting with >\n          0 (let [comp (nth v 1 nil)]\n              ;; Support [:> comp ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (native-element #js{:name comp} v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          ;; Apply metadata (e.g. :key) to the outermost element.\n          ;; Metadata is probably used only with sequeneces, and in that case\n          ;; only the key of the outermost element matters.\n          (recur (with-meta [(subs n 0 pos)\n                             (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                            (meta v)))))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (aset a i (as-element (aget a i))))\n    a))\n\n(defn expand-seq-dev [s o]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (let [val (aget a i)]\n        (when (and (vector? val)\n                   (nil? (key-from-vec val)))\n          ($! o :no-key true))\n        (aset a i (as-element val))))\n    a))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when ($ ctx :no-key)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv comp jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement comp jsprops)\n\n    1 (react/createElement comp jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[comp jsprops] argv))))\n"]}