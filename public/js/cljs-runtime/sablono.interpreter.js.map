{"version":3,"file":"sablono.interpreter.js","sources":["sablono/interpreter.cljc"],"mappings":"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","names":["x__4243__auto__","m__4244__auto__","sablono/interpreter.interpret","goog/typeOf","cljs.core/missing-protocol","sablono.interpreter/IInterpreter","sablono.interpreter/interpret","this","sablono.interpreter/update-state","component","next-props","property","value","on-change","goog.object/getValueByKeys","next-state","G__28539","G__28540","G__28541","goog.object/extend","goog.object/set","sablono.interpreter/wrap-form-element","element","ctor","props","state","G__28548","G__28549","goog/bind","goog.object/get","G__28545","G__28546","G__28547","js/React.Component","goog/inherits","x28550","event","temp__5457__auto__","handler","new-props","state-value","element-value","G__28551","G__28552","js/ReactDOM.findDOMNode","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","js/React.createElement","sablono.interpreter/lazy-load-wrappers","sablono.interpreter/wrapped-textarea","sablono.interpreter/wrapped-input","sablono.interpreter/wrapped-checked","sablono.interpreter/wrapped-select","sablono.interpreter/controlled-input?","type","and__3938__auto__","cljs.core/object?","G__28558","sablono.interpreter/element-class","G__28560","G__28561","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","sablono.interpreter/create-element","seq28564","G__28565","cljs.core/first","cljs.core/next","G__28566","self__4518__auto__","children","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","sablono.interpreter/attributes","attrs","js-attrs","cljs.core/clj->js","sablono.util/html-to-dom-attrs","class","cljs.core/array?","clojure.string.join.cljs$core$IFn$_invoke$arity$2","clojure.string/blank?","sablono.interpreter/interpret-seq","x","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","sablono.interpreter/element","vec__28571","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","content","sablono.normalize/element","sablono.interpreter/interpret-vec","sablono.util/element?","G__28574","G__28575","G__28576","cljs.core/PROTOCOL_SENTINEL","G__28577","G__28578","G__28579","cljs/core.ChunkedCons","cljs/core.ChunkedSeq","cljs/core.Cons","cljs/core.LazySeq","cljs/core.List","cljs/core.IndexedSeq","cljs/core.Subvec","cljs/core.PersistentVector"],"sourcesContent":["(ns sablono.interpreter\n  (:require #?(:clj [om.dom :as dom])\n            #?(:cljs [goog.object :as object])\n            [clojure.string :as str]\n            [clojure.string :refer [blank? join]]\n            [sablono.normalize :as normalize]\n            [sablono.util :as util]))\n\n(defprotocol IInterpreter\n  (interpret [this] \"Interpret a Clojure data structure as a React fn call.\"))\n\n#?(:cljs (defn update-state\n           \"Updates the state of the wrapped input element.\"\n           [component next-props property value]\n           (let [on-change (object/getValueByKeys component \"state\" \"onChange\")\n                 next-state #js {}]\n             (object/extend next-state next-props #js {:onChange on-change})\n             (object/set next-state property value)\n             (.setState component next-state))))\n\n;; A hack to force input elements to always update itself immediately,\n;; without waiting for requestAnimationFrame.\n\n#?(:cljs\n   (defn wrap-form-element [element property]\n     (let [ctor (fn [props]\n                  (this-as this\n                    (set! (.-state this)\n                          (let [state #js {}]\n                            (->> #js {:onChange (goog.bind (object/get this \"onChange\") this)}\n                                 (object/extend state props))\n                            state))\n                    (.call js/React.Component this props)))]\n       (set! (.-displayName ctor) (str \"wrapped-\" element))\n       (goog.inherits ctor js/React.Component)\n       (specify! (.-prototype ctor)\n         Object\n         (onChange [this event]\n           (when-let [handler (.-onChange (.-props this))]\n             (handler event)\n             (update-state\n              this (.-props this) property\n              (object/getValueByKeys event \"target\" property))))\n\n         (componentWillReceiveProps [this new-props]\n           (let [state-value (object/getValueByKeys this \"state\" property)\n                 element-value (object/get (js/ReactDOM.findDOMNode this) property)]\n             ;; On IE, onChange event might come after actual value of\n             ;; an element have changed. We detect this and render\n             ;; element as-is, hoping that next onChange will\n             ;; eventually come and bring our modifications anyways.\n             ;; Ignoring this causes skipped letters in controlled\n             ;; components\n             ;; https://github.com/facebook/react/issues/7027\n             ;; https://github.com/reagent-project/reagent/issues/253\n             ;; https://github.com/tonsky/rum/issues/86\n             ;; TODO: Find a better solution, since this conflicts\n             ;; with controlled/uncontrolled inputs.\n             ;; https://github.com/r0man/sablono/issues/148\n             (if (not= state-value element-value)\n               (update-state this new-props property element-value)\n               (update-state this new-props property (object/get new-props property)))))\n\n         (render [this]\n           (js/React.createElement element (.-state this))))\n       ctor)))\n\n#?(:cljs (def wrapped-input))\n#?(:cljs (def wrapped-checked))\n#?(:cljs (def wrapped-select))\n#?(:cljs (def wrapped-textarea))\n\n#?(:cljs (defn lazy-load-wrappers []\n           (when-not wrapped-textarea\n             (set! wrapped-input (wrap-form-element \"input\" \"value\"))\n             (set! wrapped-checked (wrap-form-element \"input\" \"checked\"))\n             (set! wrapped-select (wrap-form-element \"select\" \"value\"))\n             (set! wrapped-textarea (wrap-form-element \"textarea\" \"value\")))))\n\n(defn ^boolean controlled-input?\n  \"Returns true if `type` and `props` are used a controlled input,\n  otherwise false.\"\n  [type props]\n  #?(:cljs (and (object? props)\n                (case type\n                  \"input\"\n                  (or (exists? (.-checked props))\n                      (exists? (.-value props)))\n                  \"select\"\n                  (exists? (.-value props))\n                  \"textarea\"\n                  (exists? (.-value props))\n                  false))))\n\n#?(:cljs\n   (defn element-class\n     \"Returns either `type` or a wrapped element for controlled\n     inputs.\"\n     [type props]\n     (if (controlled-input? type props)\n       (do (lazy-load-wrappers)\n           (case type\n             \"input\"\n             (case (and (object? props) (.-type props))\n               \"radio\" wrapped-checked\n               \"checkbox\" wrapped-checked\n               wrapped-input)\n             \"select\" wrapped-select\n             \"textarea\" wrapped-textarea\n             type))\n       type)))\n\n(defn create-element\n  \"Create a React element. Returns a JavaScript object when running\n  under ClojureScript, and a om.dom.Element record in Clojure.\"\n  [type props & children]\n  #?(:clj (dom/element\n           {:attrs props\n            :children children\n            :react-key nil\n            :tag type})\n     :cljs (apply js/React.createElement (element-class type props) props children)))\n\n(defn attributes [attrs]\n  #?(:clj (-> (util/html-to-dom-attrs attrs)\n              (update :className #(some->> % (str/join \" \"))))\n     :cljs (when-let [js-attrs (clj->js (util/html-to-dom-attrs attrs))]\n             (let [class (.-className js-attrs)\n                   class (if (array? class) (join \" \" class) class)]\n               (if (blank? class)\n                 (js-delete js-attrs \"className\")\n                 (set! (.-className js-attrs) class))\n               js-attrs))))\n\n(defn- interpret-seq\n  \"Eagerly interpret the seq `x` as HTML elements.\"\n  [x]\n  (into [] (map interpret) x))\n\n(defn element\n  \"Render an element vector as a HTML element.\"\n  [element]\n  (let [[type attrs content] (normalize/element element)]\n    (apply create-element type\n           (attributes attrs)\n           (interpret-seq content))))\n\n(defn- interpret-vec\n  \"Interpret the vector `x` as an HTML element or a the children of an\n  element.\"\n  [x]\n  (if (util/element? x)\n    (element x)\n    (interpret-seq x)))\n\n(extend-protocol IInterpreter\n\n  #?(:clj clojure.lang.ChunkedCons\n     :cljs cljs.core.ChunkedCons)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.PersistentVector$ChunkedSeq\n     :cljs cljs.core.ChunkedSeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.Cons\n     :cljs cljs.core.Cons)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.LazySeq\n     :cljs cljs.core.LazySeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.PersistentList\n     :cljs cljs.core.List)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.IndexedSeq\n     :cljs cljs.core.IndexedSeq)\n  (interpret [this]\n    (interpret-seq this))\n\n  #?(:clj clojure.lang.APersistentVector$SubVector\n     :cljs cljs.core.Subvec)\n  (interpret [this]\n    (interpret-vec this))\n\n  #?(:clj clojure.lang.PersistentVector\n     :cljs cljs.core.PersistentVector)\n  (interpret [this]\n    (interpret-vec this))\n\n  #?(:clj Object :cljs default)\n  (interpret [this]\n    this)\n\n  nil\n  (interpret [this]\n    nil))\n"]}