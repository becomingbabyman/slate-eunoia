{"version":3,"file":"lib.plugins.features.blockquote.js","sources":["lib/plugins/features/blockquote.cljs"],"mappings":";;;;;AAKA,4CAAA,5CAAMA,gGAAWC;AAAjB,AACE,OAAYA,iBACA,AAACC,qBAAQ,4FAAA,2CAAA,qDAAA,oBAAA,2CAAA,qDAAA,9SAAI,6CAAA,7CAACC,0DAAeC;;AAI3C,8CAAA,9CAAMC,oGAAaC;AAAnB,AACE,GAAM,6CAAA,7CAACH,0DAAeI;AAAtB,AACE,iEAAA,1DAACC,uEACiBC,iBACAC;;AAHpB;;;AAKF,AAAA;;;6CAAA,qDAAAC,lGAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,yEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,2EAAA,3EAAMD,sFAEFE;AAFJ,AAAA,kDAAA,2DAII,qBAAA,mqBAAA,2CAAA,nuBAACb,wGACC,8CAAA,2CAAA,0DAAA,QAAA,0DAAA,QAAA,7NAACc,4RAGYhB,mDACb,kCAAA,2CAAA,oDAAA,cAAA,/IAACiB,8MAEYjB,8JACAK;;;AAZnB,AAAA,2EAAA,3EAAMQ;AAAN,AAcG,gFAAA,zEAACK;;;AAdJ,AAAA,qEAAA,rEAAML;;AAAN","names":["lib.plugins.features.blockquote/transform","change","cljs.core/clj->js","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","change/value.anchorBlock.type","lib.plugins.features.blockquote/render-node","props","props/node.type","reagent.core.create_element.cljs$core$IFn$_invoke$arity$3","props/attributes","props/children","var_args","G__26994","lib.plugins.features.blockquote/blockquote","js/Error","options","lib.plugins.helpers.auto-replace/auto-replace","lib.plugins.helpers.hotkey/hotkey","lib.plugins.features.blockquote.blockquote.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns lib.plugins.features.blockquote\n  (:require [reagent.core :as r]\n            [lib.plugins.helpers.auto-replace :refer [auto-replace]]\n            [lib.plugins.helpers.hotkey :refer [hotkey]]))\n\n(defn transform [change]\n  (.setBlocks change\n              (clj->js (if (= \"blockquote\" change.value.anchorBlock.type)\n                         {:type \"paragraph\"}\n                         {:type \"blockquote\"}))))\n\n(defn render-node [props]\n  (when (= \"blockquote\" props.node.type)\n    (r/create-element \"blockquote\"\n                      props.attributes\n                      props.children)))\n\n(defn blockquote\n  \"Adds blockquote support to editor\"\n  ([options]\n   {:plugins\n    (clj->js\n     [(auto-replace\n       {:trigger \"space\"\n        :before #\"^(>)$\"\n        :transform transform})\n      (hotkey\n       {:key \"cmd+shift+.\" ; aka cmd+shift+>\n        :transform transform})\n      {:renderNode render-node}])})\n  ([]\n   (blockquote {})))\n"]}