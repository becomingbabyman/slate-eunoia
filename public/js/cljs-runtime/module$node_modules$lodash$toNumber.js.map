{
"version":3,
"file":"module$node_modules$lodash$toNumber.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,oCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IACjHC,SAAWJ,OAAA,CAAQ,qCAAR,CADsG,CAEjHK,SAAWL,OAAA,CAAQ,qCAAR,CAFsG,CAKjHM,IAAM,CAANA,CAAU,CALuG,CAQjHC,OAAS,YARwG,CAWjHC,WAAa,oBAXoG,CAcjHC,WAAa,YAdoG,CAiBjHC,UAAY,aAjBqG,CAoBjHC,aAAeC,QA8CnBX,OAAAC,QAAA,CArBAW,QAAiB,CAACC,KAAD,CAAQ,CACvB,GAAoB,QAApB,EAAI,MAAOA,MAAX,CACE,MAAOA,MAET,IAAIT,QAAA,CAASS,KAAT,CAAJ,CACE,MAAOR,IAELF,SAAA,CAASU,KAAT,CAAJ,GACMC,KACJ,CADoC,UAAxB,EAAA,MAAOD,MAAAE,QAAP;AAAqCF,KAAAE,QAAA,EAArC,CAAuDF,KACnE,CAAAA,KAAA,CAAQV,QAAA,CAASW,KAAT,CAAA,CAAmBA,KAAnB,CAA2B,EAA3B,CAAiCA,KAF3C,CAIA,IAAoB,QAApB,EAAI,MAAOD,MAAX,CACE,MAAiB,EAAV,GAAAA,KAAA,CAAcA,KAAd,CAAsB,CAACA,KAEhCA,MAAA,CAAQA,KAAAG,QAAA,CAAcV,MAAd,CAAsB,EAAtB,CACR,KAAIW,SAAWT,UAAAU,KAAA,CAAgBL,KAAhB,CACf,OAAQI,SAAD,EAAaR,SAAAS,KAAA,CAAeL,KAAf,CAAb,CACHH,YAAA,CAAaG,KAAAM,MAAA,CAAY,CAAZ,CAAb,CAA6BF,QAAA,CAAW,CAAX,CAAe,CAA5C,CADG,CAEFV,UAAAW,KAAA,CAAgBL,KAAhB,CAAA,CAAyBR,GAAzB,CAA+B,CAACQ,KAlBd,CA7C4F;",
"sources":["node_modules/lodash/toNumber.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$toNumber\"] = function(global,process,require,module,exports,shadow$shims) {\nvar isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","isObject","isSymbol","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toNumber","value","other","valueOf","replace","isBinary","test","slice"]
}
