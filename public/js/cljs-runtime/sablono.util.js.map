{"version":3,"file":"sablono.util.js","sources":["sablono/util.cljc"],"mappings":"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","names":["sablono.util/*base-url*","x__4243__auto__","m__4244__auto__","sablono/util.to-str","goog/typeOf","cljs.core/missing-protocol","sablono.util/ToString","sablono.util/to-str","x","sablono/util.to-uri","sablono.util/ToURI","sablono.util/to-uri","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","sablono.util/as-str","seq28477","self__4519__auto__","cljs.core/seq","xs","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","sablono.util/camel-case","k","cljs.core/Keyword","cljs.core/Symbol","vec__28481","seq__28482","first__28483","cljs.core/first","cljs.core/next","first-word","words","cljs.core/name","cljs.core/empty?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","clojure.string/capitalize","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","sablono.util/camel-case-keys","m","cljs.core/map?","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__28484","vec__28485","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v","G__28488","cljs.core.update.cljs$core$IFn$_invoke$arity$3","sablono.util/element?","cljs.core/vector?","sablono.util/html-to-dom-attrs","attrs","clojure.set/rename-keys","sablono.util/join-classes","classes","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$1","cljs.core/nil?","clojure.string.join.cljs$core$IFn$_invoke$arity$2","sablono.util/react-fn","type","cljs.core/contains?","cljs.core/PROTOCOL_SENTINEL","goog.object/set","G__28489","G__28490","G__28491","G__28492","G__28493","G__28494","G__28495","G__28496","G__28497","cljs/core.Keyword","goog/Uri","or__3949__auto__","cljs.core/not","cljs.core/re-matches","base","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","_","G__28507","G__28508","G__28509"],"sourcesContent":["(ns sablono.util\n  #?(:cljs (:import goog.Uri))\n  (:require [clojure.set :refer [rename-keys]]\n            [clojure.string :as str]))\n\n(def ^:dynamic *base-url* nil)\n\n(defprotocol ToString\n  (to-str [x] \"Convert a value into a string.\"))\n\n(defprotocol ToURI\n  (to-uri [x] \"Convert a value into a URI.\"))\n\n(defn as-str\n  \"Converts its arguments into a string using to-str.\"\n  [& xs]\n  (str/join (map to-str xs)))\n\n(defn camel-case\n  \"Returns camel case version of the key, e.g. :http-equiv becomes :httpEquiv.\"\n  [k]\n  (if (or (keyword? k)\n          (string? k)\n          (symbol? k))\n    (let [[first-word & words] (.split (name k) \"-\")]\n      (if (or (empty? words)\n              (= \"aria\" first-word)\n              (= \"data\" first-word))\n        k\n        (-> (map str/capitalize words)\n            (conj first-word)\n            str/join\n            keyword)))\n    k))\n\n(defn camel-case-keys\n  \"Recursively transforms all map keys into camel case.\"\n  [m]\n  (if (map? m)\n    (let [m (into {}\n                  (map (fn [[k v]] [(camel-case k) v]))\n                  m)]\n      (cond-> m\n        (map? (:style m))\n        (update :style camel-case-keys)))\n    m))\n\n(defn element?\n  \"Return true if `x` is an HTML element. True when `x` is a vector\n  and the first element is a keyword, e.g. `[:div]` or `[:div [:span \\\"x\\\"]`.\"\n  [x]\n  (and (vector? x)\n       (keyword? (first x))))\n\n(defn html-to-dom-attrs\n  \"Converts all HTML attributes to their DOM equivalents.\"\n  [attrs]\n  (rename-keys (camel-case-keys attrs)\n               {:class :className\n                :for :htmlFor}))\n\n(defn join-classes\n  \"Join the `classes` with a whitespace.\"\n  [classes]\n  (->> classes\n       (into [] (comp\n                 (mapcat (fn [x] (if (string? x) [x] (seq x))))\n                 (remove nil?)))\n       (str/join \" \")))\n\n(defn react-fn\n  \"Return the symbol of a fn that build a React element. \"\n  [type]\n  (if (contains? #{:input :select :textarea} (keyword type))\n    'sablono.interpreter/create-element\n    'js/React.createElement))\n\n#?(:cljs\n   (extend-protocol ToString\n     cljs.core.Keyword\n     (to-str [x]\n       (name x))\n     goog.Uri\n     (to-str [x]\n       (if (or (. x (hasDomain))\n               (nil? (. x (getPath)))\n               (not (re-matches #\"^/.*\" (. x (getPath)))))\n         (str x)\n         (let [base (str *base-url*)]\n           (if (re-matches #\".*/$\" base)\n             (str (subs base 0 (dec (count base))) x)\n             (str base x)))))\n     nil\n     (to-str [_]\n       \"\")\n     number\n     (to-str [x]\n       (str x))\n     default\n     (to-str [x]\n       (str x))))\n\n#?(:cljs\n   (extend-protocol ToURI\n     Uri\n     (to-uri [x] x)\n     default\n     (to-uri [x] (Uri. (str x)))))\n"]}