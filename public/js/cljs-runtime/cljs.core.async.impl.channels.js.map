{"version":3,"file":"cljs.core.async.impl.channels.js","sources":["cljs/core/async/impl/channels.cljs"],"mappings":"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","names":["cljs.core.async.impl.channels/box","val","js/cljs","js/cljs.core","js/cljs.core.async","js/cljs.core.async.impl","js/cljs.core.async.impl.channels","js/cljs.core.async.impl.channels.t_cljs$core$async$impl$channels28939","cljs.core.async.impl.channels/t_cljs$core$async$impl$channels28939","_28941","meta28940","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","cljs.core.async.impl.channels/->t_cljs$core$async$impl$channels28939","_","cljs.core.async.impl.channels/PutBox","cljs.core.async.impl.channels/->PutBox","handler","cljs.core.async.impl.channels/put-active?","box","cljs.core.async.impl.protocols/active?","cljs.core.async.impl.channels/MAX_DIRTY","x__4243__auto__","m__4244__auto__","cljs/core.async.impl.channels.abort","goog/typeOf","cljs.core/missing-protocol","cljs.core.async.impl.channels/MMC","cljs.core.async.impl.channels/abort","this","cljs.core/PROTOCOL_SENTINEL","cljs.core.async.impl.channels/ManyToManyChannel","cljs.core.async.impl.channels/->ManyToManyChannel","takes","dirty-takes","puts","dirty-puts","buf","closed","add!","putter","put-handler","put-cb","cljs.core.async.impl.dispatch/run","cljs.core/constantly","cljs.core.async.impl.protocols/close!","js/Error","and__3938__auto__","cljs.core/not","done?","cljs.core/reduced?","take-cbs","takers","cljs.core/count","taker","ret","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/seq","seq__29008","chunk__29009","count__29010","i__29011","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","f","take-cb","cljs.core.async.impl.protocols/commit","cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","temp__5455__auto__","vec__29033","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cbs","cb","seq__29036","chunk__29037","count__29038","i__29039","has-val","cljs.core.async.impl.channels/ex-handler","ex","js/console","cljs.core.async.impl.channels/handle","exh","t","else","fexpr__29257","or__3949__auto__","cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2","var_args","G__29260","cljs.core.async.impl.channels/chan","cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2","xform","cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3","cljs.core.async.impl.buffers/ring-buffer","cljs.core.async.impl.protocols/add!","e29266","e29267"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.channels\n  (:require [cljs.core.async.impl.protocols :as impl]\n            [cljs.core.async.impl.dispatch :as dispatch]\n            [cljs.core.async.impl.buffers :as buffers]))\n\n\n\n(defn box [val]\n  (reify cljs.core/IDeref\n    (-deref [_] val)))\n\n(deftype PutBox [handler val])\n\n(defn put-active? [box]\n  (impl/active? (.-handler box)))\n\n(def ^:const MAX_DIRTY 64)\n\n(defprotocol MMC\n  (abort [this]))\n\n(deftype ManyToManyChannel [takes ^:mutable dirty-takes puts ^:mutable dirty-puts ^not-native buf ^:mutable closed add!]\n  MMC\n  (abort [this]\n    (loop []\n      (let [putter (.pop puts)]\n        (when-not (nil? putter)\n          (let [^not-native put-handler (.-handler putter)\n                val (.-val putter)]\n            (if ^boolean (impl/active? put-handler)\n              (let [put-cb (impl/commit put-handler)]\n                (dispatch/run #(put-cb true)))\n              (recur))))))\n    (.cleanup puts (constantly false))\n    (impl/close! this))\n  impl/WritePort\n  (put! [this val ^not-native handler]\n    (assert (not (nil? val)) \"Can't put nil on a channel\")\n    ;; bug in CLJS compiler boolean inference - David\n    (let [^boolean closed closed]\n      (if (or closed (not ^boolean (impl/active? handler)))\n        (box (not closed))\n        (if (and buf (not (impl/full? buf)))\n          (do\n            (impl/commit handler)\n            (let [done? (reduced? (add! buf val))\n                  take-cbs (loop [takers []]\n                             (if (and (pos? (.-length takes)) (pos? (count buf)))\n                               (let [^not-native taker (.pop takes)]\n                                 (if ^boolean (impl/active? taker)\n                                   (let [ret (impl/commit taker)\n                                         val (impl/remove! buf)]\n                                     (recur (conj takers (fn [] (ret val)))))\n                                   (recur takers)))\n                               takers))]\n              (when done? (abort this))\n              (when (seq take-cbs)\n                (doseq [f take-cbs]\n                  (dispatch/run f)))\n              (box true)))\n          (let [taker (loop []\n                        (let [^not-native taker (.pop takes)]\n                          (when taker\n                            (if (impl/active? taker)\n                              taker\n                              (recur)))))]\n            (if taker\n              (let [take-cb (impl/commit taker)]\n                (impl/commit handler)\n                (dispatch/run (fn [] (take-cb val)))\n                (box true))\n              (do\n                (if (> dirty-puts MAX_DIRTY)\n                  (do (set! dirty-puts 0)\n                      (.cleanup puts put-active?))\n                  (set! dirty-puts (inc dirty-puts)))\n                (when (impl/blockable? handler)\n                  (assert (< (.-length puts) impl/MAX-QUEUE-SIZE)\n                    (str \"No more than \" impl/MAX-QUEUE-SIZE\n                         \" pending puts are allowed on a single channel.\"\n                         \" Consider using a windowed buffer.\"))\n                  (.unbounded-unshift puts (PutBox. handler val)))\n                nil)))))))\n  impl/ReadPort\n  (take! [this ^not-native handler]\n    (if (not ^boolean (impl/active? handler))\n      nil\n      (if (and (not (nil? buf)) (pos? (count buf)))\n        (do\n          (if-let [take-cb (impl/commit handler)]\n            (let [val (impl/remove! buf)\n                  [done? cbs] (when (pos? (.-length puts))\n                                (loop [cbs []]\n                                  (let [putter (.pop puts)\n                                        ^not-native put-handler (.-handler putter)\n                                        val (.-val putter)\n                                        cb (and ^boolean (impl/active? put-handler) (impl/commit put-handler))\n                                        cbs (if cb (conj cbs cb) cbs)\n                                        done? (when cb (reduced? (add! buf val)))]\n                                    (if (and (not done?) (not (impl/full? buf)) (pos? (.-length puts)))\n                                      (recur cbs)\n                                      [done? cbs]))))]\n              (when done?\n                (abort this))\n              (doseq [cb cbs]\n                (dispatch/run #(cb true)))\n              (box val))))\n        (let [putter (loop []\n                       (let [putter (.pop puts)]\n                         (when putter\n                           (if ^boolean (impl/active? (.-handler putter))\n                             putter\n                             (recur)))))]\n          (if putter\n            (let [put-cb (impl/commit (.-handler putter))]\n              (impl/commit handler)\n              (dispatch/run #(put-cb true))\n              (box (.-val putter)))\n            (if closed\n              (do\n                (when buf (add! buf))\n                (if (and (impl/active? handler) (impl/commit handler))\n                  (let [has-val (and buf (pos? (count buf)))]\n                    (let [val (when has-val (impl/remove! buf))]\n                      (box val)))\n                  nil))\n              (do\n                (if (> dirty-takes MAX_DIRTY)\n                  (do (set! dirty-takes 0)\n                      (.cleanup takes impl/active?))\n                  (set! dirty-takes (inc dirty-takes)))\n                (when (impl/blockable? handler)\n                  (assert (< (.-length takes) impl/MAX-QUEUE-SIZE)\n                    (str \"No more than \" impl/MAX-QUEUE-SIZE\n                         \" pending takes are allowed on a single channel.\"))\n                  (.unbounded-unshift takes handler))\n                nil)))))))\n  impl/Channel\n  (closed? [_] closed)\n  (close! [this]\n    (if ^boolean closed\n        nil\n        (do (set! closed true)\n            (when (and buf (zero? (.-length puts)))\n                    (add! buf))\n            (loop []\n              (let [^not-native taker (.pop takes)]\n                (when-not (nil? taker)\n                  (when ^boolean (impl/active? taker)\n                    (let [take-cb (impl/commit taker)\n                          val (when (and buf (pos? (count buf))) (impl/remove! buf))]\n                      (dispatch/run (fn [] (take-cb val)))))\n                  (recur))))\n            (when buf (impl/close-buf! buf))\n            nil))))\n\n(defn- ex-handler [ex]\n  (.log js/console ex)\n  nil)\n\n(defn- handle [buf exh t]\n  (let [else ((or exh ex-handler) t)]\n    (if (nil? else)\n      buf\n      (impl/add! buf else))))\n\n(defn chan\n  ([buf] (chan buf nil))\n  ([buf xform] (chan buf xform nil))\n  ([buf xform exh]\n     (ManyToManyChannel. (buffers/ring-buffer 32) 0 (buffers/ring-buffer 32)\n                         0 buf false\n                         (let [add! (if xform (xform impl/add!) impl/add!)]\n                           (fn\n                             ([buf]\n                              (try\n                                (add! buf)\n                                (catch :default t\n                                  (handle buf exh t))))\n                             ([buf val]\n                              (try\n                                (add! buf val)\n                                (catch :default t\n                                  (handle buf exh t)))))))))\n"]}