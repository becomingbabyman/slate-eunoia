{"version":3,"file":"reagent.impl.component.js","sources":["reagent/impl/component.cljs"],"mappings":"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","names":["reagent.impl.component/shallow-obj-to-map","o","ks","cljs.core/js-keys","len","m","i","k","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","reagent.impl.component/extract-props","v","p","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/map?","reagent.impl.component/extract-children","first-child","cljs.core/count","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","reagent.impl.component/props-argv","c","temp__5459__auto__","a","reagent.impl.component/get-argv","reagent.impl.component/get-props","reagent.impl.component/get-children","G__34803","js/module$node_modules$react$index.Children.toArray","cljs.core.into.cljs$core$IFn$_invoke$arity$2","reagent.impl.component/reagent-class?","cljs.core/fn?","G__34817","reagent.impl.component/react-class?","G__34827","reagent.impl.component/reagent-component?","reagent.impl.component/cached-react-class","reagent.impl.component/cache-react-class","constructor","reagent.impl.component/state-atom","this","sa","reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1","js/reagent","js/reagent.impl","js/reagent.impl.component","js/reagent.impl.component.as-element","reagent.impl.component/as-element","reagent.impl.component/wrap-render","f","_","cljs.core/ifn?","js/Error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","res","n","G__34851","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core/vector?","args","G__34855","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","reagent.impl.component/do-render","*current-component*34868","reagent.impl.component/*current-component*","ok","reagent/debug.has-console","reagent/debug.tracking","reagent/debug.track-console","js/console","reagent.impl.component/comp-name","reagent.impl.component/rat-opts","reagent.impl.component/static-fns","reagent.impl.util/*non-reactive*","rat","reagent.impl.batching/mark-rendered","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/custom-wrapper","key","G__34872","cljs.core/Keyword","cljs.core/reset!","nextprops","nextstate","or__3949__auto__","reagent.impl.util/*always-update*","old-argv","new-argv","noargv","e34878","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","e","oldprops","reagent.impl.batching/next-mount-count","G__34882","reagent.ratom/dispose!","error","info","reagent.impl.component/get-wrapper","name","wrap","and__3938__auto__","reagent.impl.component/obligatory","reagent.impl.component/dash-to-camel","reagent.impl.util/memoize-1","reagent.impl.util/dash-to-camel","reagent.impl.component/camelify-map-keys","fun-map","cljs.core/reduce-kv","reagent.impl.component/add-obligatory","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/wrap-funs","fmap","renders","cljs.core/select-keys","render-fun","cljs.core/vals","cljs.core/first","legacy-render","reagent.impl.util/fun-name","G__34913","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/map-to-js","G__34917","cljs.core/name","reagent.impl.component/cljsify","body","reagent.impl.component/create-class","G__34920","js/module$node_modules$create_react_class$index","reagent.impl.component/fiber-component-path","fiber","G__34921","parent","G__34922","path","G__34924","cljs.core/empty?","reagent.impl.component/component-path","temp__5455__auto__","G__34929","G__34930","instance","G__34932","G__34934","elem","G__34936","G__34937","G__34938","owner","G__34940","G__34941","G__34942","G__34946","reagent.impl.component/fn-to-class","spec","cljs.core/meta","withrender","reagent.impl.component/as-class","tag","cached-class","reagent.impl.component/reactify-component","comp"],"sourcesContent":["(ns reagent.impl.component\n  (:require [create-react-class :as create-react-class]\n            [react :as react]\n            [reagent.impl.util :as util]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn dev? warn error warn-unless\n                                          assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {} i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (aget o k)) (inc i)))\n        m))))\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [c p]\n  (if-some [a ($ p :argv)]\n    a\n    [(.-constructor c) (shallow-obj-to-map p)]))\n\n(defn get-argv [c]\n  (props-argv c ($ c :props)))\n\n(defn get-props [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-props v)\n      (shallow-obj-to-map p))))\n\n(defn get-children [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-children v)\n      (->> ($ p :children)\n           (react/Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :render)))))\n\n(defn ^boolean reagent-component? [c]\n  (some? ($ c :reagentRender)))\n\n(defn cached-react-class [c]\n  ($ c :cljsReactClass))\n\n(defn cache-react-class [c constructor]\n  ($! c :cljsReactClass constructor))\n\n\n;;; State\n\n(defn state-atom [this]\n  (let [sa ($ this :cljsState)]\n    (if-not (nil? sa)\n      sa\n      ($! this :cljsState (ratom/atom nil)))))\n\n;; avoid circular dependency: this gets set from template.cljs\n(defonce as-element nil)\n\n\n;;; Rendering\n\n(defn wrap-render [c]\n  (let [f ($ c :reagentRender)\n        _ (assert-callable f)\n        res (if (true? ($ c :cljsLegacyRender))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (as-element res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (as-element (apply vector res args)))\n                           res)]\n                   ($! c :reagentRender f)\n                   (recur c))\n      :else res)))\n\n(declare comp-name)\n\n(defn do-render [c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(def static-fns\n  {:render\n   (fn render []\n     (this-as c (if util/*non-reactive*\n                  (do-render c)\n                  (let [rat ($ c :cljsRatom)]\n                    (batch/mark-rendered c)\n                    (if (nil? rat)\n                      (ratom/run-in-reaction #(do-render c) c \"cljsRatom\"\n                                             batch/queue-render rat-opts)\n                      (._run rat false))))))})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getInitialState\n    (fn getInitialState []\n      (this-as c (reset! (state-atom c) (.call f c c))))\n\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv ($ c :props.argv)\n                         new-argv ($ nextprops :argv)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (try (not= old-argv new-argv)\n                                                (catch :default e\n                                                  (warn \"Exception thrown while comparing argv's in shouldComponentUpdate: \" old-argv \" \" new-argv \" \" e)\n                                                  false)))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops]\n      (this-as c (.call f c c (props-argv c oldprops))))\n\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c\n               ($! c :cljsMountOrder (batch/next-mount-count))\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> ($ c :cljsRatom)\n                       ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidCatch\n    (fn componentDidCatch [error info]\n      (this-as c (.call f c c error info)))\n\n    nil))\n\n(defn get-wrapper [key f name]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillMount nil\n                 :componentWillUnmount nil})\n\n(def dash-to-camel (util/memoize-1 util/dash-to-camel))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-camel keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender :componentFunction])\n          render-fun (-> renders vals first)]\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:componentFunction fmap))\n        legacy-render (nil? render-fun)\n        render-fun (or render-fun\n                       (:render fmap))\n        name (str (or (:displayName fmap)\n                      (util/fun-name render-fun)))\n        name (case name\n               \"\" (str (gensym \"reagent\"))\n               name)\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v name)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :autobind false\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (:render static-fns))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (aset (name k) v)))\n             #js{} m))\n\n(defn cljsify [body]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      wrap-funs\n      map-to-js))\n\n(defn create-class [body]\n  {:pre [(map? body)]}\n  (->> body\n       cljsify\n       create-react-class))\n\n(defn fiber-component-path [fiber]\n  (let [name (some-> fiber\n                     ($ :type)\n                     ($ :displayName))\n        parent (some-> fiber\n                       ($ :return))\n        path (some-> parent\n                     fiber-component-path\n                     (str \" > \"))\n        res (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  ;; Try both original name (for UMD foreign-lib) and manged name (property access, for Closure optimized React)\n  (if-let [fiber (or (some-> c ($ :_reactInternalFiber))\n                     (some-> c (.-_reactInternalFiber)))]\n    (fiber-component-path fiber)\n    (let [instance (or (some-> c ($ :_reactInternalInstance))\n                       (some-> c (.-_reactInternalInstance))\n                       c)\n          elem (or (some-> instance ($ :_currentElement))\n                   (some-> instance (.-_currentElement)))\n          name (some-> elem\n                       ($ :type)\n                       ($ :displayName))\n          owner (or (some-> elem ($ :_owner))\n                    (some-> elem (.-_owner)))\n          path (some-> owner\n                       component-path\n                       (str \" > \"))\n          res (str path name)]\n      (when-not (empty? res) res))))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (or (component-path c)\n                (some-> c .-constructor util/fun-name))]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn fn-to-class [f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (let [n (util/fun-name f)]\n                                               (if (empty? n) f n))\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender)]\n      (cache-react-class f res))))\n\n(defn as-class [tag]\n  (if-some [cached-class (cached-react-class tag)]\n    cached-class\n    (fn-to-class tag)))\n\n(defn reactify-component [comp]\n  (if (react-class? comp)\n    comp\n    (as-class comp)))\n"]}