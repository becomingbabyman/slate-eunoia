{
"version":3,
"file":"module$node_modules$debug$src$debug.js",
"lineCount":5,
"mappings":"AAAAA,cAAA,oCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CA4CrHC,QAASA,YAAW,CAACC,SAAD,CAAY,CAAA,IAC1BC,KAAO,CADmB,CAChBC,CAEd,KAAKA,CAAL,GAAUF,UAAV,CACEC,IACA,EADUA,IACV,EADkB,CAClB,EADuBA,IACvB,CAD+BD,SAAAG,WAAA,CAAqBD,CAArB,CAC/B,CAAAD,IAAA,EAAQ,CAGV,OAAOJ,QAAAO,OAAA,CAAeC,IAAAC,IAAA,CAASL,IAAT,CAAf,CAAgCJ,OAAAO,OAAAG,OAAhC,CARuB,CAmBhCC,QAASA,YAAW,CAACR,SAAD,CAAY,CAE9BS,QAASA,MAAK,EAAG,CAEf,GAAKA,KAAAC,QAAL,CAAA,CAKA,IAAIC,KAAO,CAAC,IAAIC,IAHLH,MAKXI,KAAA,CADSF,IACT,EADiBG,QACjB,EAD6BH,IAC7B,CALWF,MAMXM,KAAA,CAAYD,QAEZA,SAAA,CARWL,KAOXE,KACA,CADYA,IAIZ,KAAIK,KAAWC,KAAJ,CAAUC,SAAAX,OAAV,CACX,KAASL,IAAT,CAAa,CAAb,CAAgBA,IAAhB;AAAoBc,IAAAT,OAApB,CAAiCL,IAAA,EAAjC,CACEc,IAAA,CAAKd,IAAL,CAAA,CAAUgB,SAAA,CAAUhB,IAAV,CAGZc,KAAA,CAAK,CAAL,CAAA,CAAUnB,OAAAsB,OAAA,CAAeH,IAAA,CAAK,CAAL,CAAf,CAEN,SAAJ,GAAiB,MAAOA,KAAA,CAAK,CAAL,CAAxB,EAEEA,IAAAI,QAAA,CAAa,IAAb,CAIF,KAAIC,MAAQ,CACZL,KAAA,CAAK,CAAL,CAAA,CAAUA,IAAA,CAAK,CAAL,CAAAM,QAAA,CAAgB,eAAhB,CAAiC,QAAQ,CAACC,KAAD,CAAQC,MAAR,CAAgB,CAEjE,GAAc,IAAd,GAAID,KAAJ,CAAoB,MAAOA,MAC3BF,MAAA,EACII,OAAAA,CAAY5B,OAAA6B,WAAA,CAAmBF,MAAnB,CACZ,WAAJ,GAAmB,MAAOC,OAA1B,GAEEF,KAIA,CAJQE,MAAAE,KAAA,CAhCDlB,KAgCC,CADEO,IAAAY,CAAKP,KAALO,CACF,CAIR,CADAZ,IAAAa,OAAA,CAAYR,KAAZ,CAAmB,CAAnB,CACA,CAAAA,KAAA,EANF,CAQA,OAAOE,MAb0D,CAAzD,CAiBV1B,QAAAiC,WAAAH,KAAA,CA1CWlB,KA0CX,CAA8BO,IAA9B,CAGAe,EADYtB,KAAAuB,IACZD,EADyBlC,OAAAmC,IACzBD,EADwCE,OAAAD,IAAAE,KAAA,CAAiBD,OAAjB,CACxCF,OAAA,CA7CWtB,KA6CX,CAAkBO,IAAlB,CA/CA,CAFe,CAoDjBP,KAAAT,UAAA;AAAkBA,SAClBS,MAAAC,QAAA,CAAgBb,OAAAa,QAAA,CAAgBV,SAAhB,CAChBS,MAAA0B,UAAA,CAAkBtC,OAAAsC,UAAA,EAClB1B,MAAA2B,MAAA,CAAcrC,WAAA,CAAYC,SAAZ,CAGV,WAAJ,GAAmB,MAAOH,QAAAwC,KAA1B,EACExC,OAAAwC,KAAA,CAAa5B,KAAb,CAGF,OAAOA,MAhEuB,CAtDhCZ,OAAA,CAAUD,MAAAC,QAAV,CAA2BW,WAAAC,MAA3B,CAA+CD,WAAA,CAAY,SAAZ,CAA/C,CAAwEA,WACxEX,QAAAsB,OAAA,CA6LAA,QAAe,CAACS,GAAD,CAAM,CACnB,MAAIA,IAAJ,WAAmBU,MAAnB,CAAiCV,GAAAW,MAAjC,EAA8CX,GAAAY,QAA9C,CACOZ,GAFY,CA5LrB/B,QAAA4C,QAAA,CAyJAA,QAAgB,EAAG,CACjB5C,OAAA6C,OAAA,CAAe,EAAf,CADiB,CAxJnB7C,QAAA6C,OAAA,CA8HAA,QAAe,CAACC,UAAD,CAAa,CAC1B9C,OAAA+C,KAAA,CAAaD,UAAb,CAEA9C,QAAAgD,MAAA,CAAgB,EAChBhD,QAAAiD,MAAA,CAAgB,EAKhB,KAHA,IAAIC;AAAQA,CAAuB,QAAtB,GAAA,MAAOJ,WAAP,CAAiCA,UAAjC,CAA8C,EAA/CI,OAAA,CAAyD,QAAzD,CAAZ,CACIC,IAAMD,KAAAxC,OADV,CAGSL,EAAI,CAAb,CAAgBA,CAAhB,CAAoB8C,GAApB,CAAyB9C,CAAA,EAAzB,CACO6C,KAAA,CAAM7C,CAAN,CAAL,GACAyC,UACA,CADaI,KAAA,CAAM7C,CAAN,CAAAoB,QAAA,CAAiB,KAAjB,CAAwB,KAAxB,CACb,CAAsB,GAAtB,GAAIqB,UAAA,CAAW,CAAX,CAAJ,CACE9C,OAAAiD,MAAAG,KAAA,CAAmB,IAAIC,MAAJ,CAAW,GAAX,CAAiBP,UAAAQ,OAAA,CAAkB,CAAlB,CAAjB,CAAwC,GAAxC,CAAnB,CADF,CAGEtD,OAAAgD,MAAAI,KAAA,CAAmB,IAAIC,MAAJ,CAAW,GAAX,CAAiBP,UAAjB,CAA8B,GAA9B,CAAnB,CALF,CAVwB,CA7H5B9C,QAAAa,QAAA,CAmKAA,QAAgB,CAAC0C,IAAD,CAAO,CAAA,IACdJ,GACF,KAAA9C,EAAI,CAAT,KAAY8C,GAAZ,CAAkBnD,OAAAiD,MAAAvC,OAAlB,CAAwCL,CAAxC,CAA4C8C,GAA5C,CAAiD9C,CAAA,EAAjD,CACE,GAAIL,OAAAiD,MAAA,CAAc5C,CAAd,CAAAmD,KAAA,CAAsBD,IAAtB,CAAJ,CACE,MAAO,CAAA,CAGNlD,EAAA,CAAI,CAAT,KAAY8C,GAAZ,CAAkBnD,OAAAgD,MAAAtC,OAAlB,CAAwCL,CAAxC,CAA4C8C,GAA5C,CAAiD9C,CAAA,EAAjD,CACE,GAAIL,OAAAgD,MAAA,CAAc3C,CAAd,CAAAmD,KAAA,CAAsBD,IAAtB,CAAJ,CACE,MAAO,CAAA,CAGX,OAAO,CAAA,CAZc,CAlKvBvD,QAAAyD,SAAA;AAAmB3D,OAAA,CAAQ,8BAAR,CAMnBE,QAAAgD,MAAA,CAAgB,EAChBhD,QAAAiD,MAAA,CAAgB,EAQhBjD,QAAA6B,WAAA,CAAqB,EAMrB,KAAIZ,QAnCiH;",
"sources":["node_modules/debug/src/debug.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$debug$src$debug\"] = function(global,process,require,module,exports,shadow$shims) {\n\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","selectColor","namespace","hash","i","charCodeAt","colors","Math","abs","length","createDebug","debug","enabled","curr","Date","diff","prevTime","prev","args","Array","arguments","coerce","unshift","index","replace","match","format","formatter","formatters","call","val","splice","formatArgs","apply","log","console","bind","useColors","color","init","Error","stack","message","disable","enable","namespaces","save","names","skips","split","len","push","RegExp","substr","name","test","humanize"]
}
