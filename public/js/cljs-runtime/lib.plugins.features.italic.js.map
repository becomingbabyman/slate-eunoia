{"version":3,"file":"lib.plugins.features.italic.js","sources":["lib/plugins/features/italic.cljs"],"mappings":";;;;;;AAMA,0DAAA,1DAAMA,4HAA6BC;AAAnC,AACE,iEAAA,1DAACC,6CAAKD;;AAER,wCAAA,xCAAME,wFAAWC,OAAOC,MAAMC;AAA9B,AACE,oBAAIA;AACF,IAAMC,OAAK,AAACC,gBAAMC;IACZC,aAAW,AAACV,wDAA4BO;AAD9C,AAEE,OAAaH,kBAAOM,WAAW,qBAAA,mFAAA,xGAACC;;AAClC,yBAAA,lBAAaP;;;AAEjB,0CAAA,1CAAMQ,4FAAaC;AAAnB,AACE,GAAM,6CAAA,7CAACC,sDAAWC;AAAlB,AACE,IAAAC,WACC,AAACG,mDAAQC;IADVH,WAECI;AAFD,AAAA,kHAAAL,SAAAC,4CAAAD,SAAAC,xKAACC,sDAAAA,yEAAAA;;AADH;;;AAKF,AAAA;;;qCAAA,6CAAAI,lFAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,iEAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,AAAA,mEAAA,nEAAMD,8EAEFE;AAFJ,AAAA,kDAAA,2DAII,qBAAA,mpBAAA,2CAAA,ntBAACf,wGACC,8CAAA,2CAAA,0DAAA,KAAA,0DAAA,SAAA,3NAACgB,0RAGYxB,+CACb,kCAAA,2CAAA,oDAAA,QAAA,zIAACyB,wMAEYzB,0JACAS;;;AAZnB,AAAA,mEAAA,nEAAMY;AAAN,AAcG,wEAAA,jEAACK;;;AAdJ,AAAA,6DAAA,7DAAML;;AAAN","names":["lib.plugins.features.italic/strip-auto-replace-triggers","matched-text","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","lib.plugins.features.italic/transform","change","event","matches","text","cljs.core/first","matches/before","clean-text","cljs.core/clj->js","lib.plugins.features.italic/render-mark","props","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","props/mark.type","G__36725","G__36726","lib.components.core/i","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","props/attributes","props/children","var_args","G__36735","lib.plugins.features.italic/italic","js/Error","options","lib.plugins.helpers.auto-replace/auto-replace","lib.plugins.helpers.hotkey/hotkey","lib.plugins.features.italic.italic.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns lib.plugins.features.italic\n  (:require [reagent.core :as r]\n            [lib.components.core :as c]\n            [lib.plugins.helpers.auto-replace :refer [auto-replace]]\n            [lib.plugins.helpers.hotkey :refer [hotkey]]))\n\n(defn strip-auto-replace-triggers [matched-text]\n  (subs matched-text 1))\n\n(defn transform [change event matches]\n  (if matches\n    (let [text (first matches.before)\n          clean-text (strip-auto-replace-triggers text)]\n      (.insertText change clean-text (clj->js [\"italic\"])))\n    (.toggleMark change \"italic\")))\n\n(defn render-mark [props]\n  (when (= \"italic\" props.mark.type)\n    (c/i\n     (js->clj props.attributes)\n     props.children)))\n\n(defn italic\n  \"Adds italic support to editor\"\n  ([options]\n   {:plugins\n    (clj->js\n     [(auto-replace\n       {:trigger #\"\\_\"\n        :before #\"(\\_.+)\"\n        :transform transform})\n      (hotkey\n       {:key \"cmd+i\"\n        :transform transform})\n      {:renderMark render-mark}])})\n  ([]\n   (italic {})))\n"]}